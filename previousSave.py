# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import os
import shutil


class Ui_GUI(object):
    def setupUi(self, GUI):
        GUI.setObjectName("GUI")
        GUI.resize(700, 180)
        GUI.setMinimumSize(QtCore.QSize(700, 180))
        GUI.setMaximumSize(QtCore.QSize(700, 180))
        GUI.setStyleSheet("background-color: #FFFFFF;\n"
                          "")

        GUI.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        GUI.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.horizontalLayout = QtWidgets.QHBoxLayout(GUI)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(GUI)
        self.frame.setStyleSheet("background-color: #282a36;\n"
                                 "border: 2px;\n"
                                 "border-radius: 10px;\n"
                                 "\n"
                                 "\n"
                                 "                                         \n"
                                 "\n"
                                 "\n"
                                 "")
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setEnabled(False)
        self.lineEdit.setGeometry(QtCore.QRect(10, 40, 471, 31))
        self.lineEdit.setStyleSheet("border: 2px;\n"
                                    "border-color: #8be9fd;\n"
                                    "background-color: #44475a;\n"
                                    "color: #bd93f9;\n"
                                    "border-radius: 5px;")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setEnabled(False)
        self.lineEdit_2.setGeometry(QtCore.QRect(10, 80, 471, 31))
        self.lineEdit_2.setStyleSheet("border: 2px;\n"
                                      "border-color: #8be9fd;\n"
                                      "background-color: #44475a;\n"
                                      "color: #bd93f9;\n"
                                      "border-radius: 5px;")
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(509, 40, 131, 31))
        self.pushButton.setStyleSheet("QPushButton{\n"
                                      "\n"
                                      "background-color: #bd93f9;\n"
                                      "border: 2px;\n"
                                      "border-radius: 13px;\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "}\n"
                                      " \n"
                                      "\n"
                                      "QPushButton:hover:!pressed {background-color: #6272a4; }")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(510, 80, 131, 31))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
                                        "\n"
                                        "background-color: #bd93f9;\n"
                                        "border: 2px;\n"
                                        "border-radius: 13px;\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "}\n"
                                        " \n"
                                        "\n"
                                        "QPushButton:hover:!pressed {background-color: #6272a4; }")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(510, 120, 131, 31))
        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "\n"
                                        "background-color: #bd93f9;\n"
                                        "border: 2px;\n"
                                        "border-radius: 13px;\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "}\n"
                                        " \n"
                                        "QPushButton:hover:!pressed {background-color: #6272a4; }")
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_3.setEnabled(False)
        self.lineEdit_3.setGeometry(QtCore.QRect(10, 120, 471, 31))
        self.lineEdit_3.setStyleSheet("border: 2px;\n"
                                      "border-color: #8be9fd;\n"
                                      "background-color: #44475a;\n"
                                      "color: #bd93f9;\n"
                                      "border-radius: 5px;")
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(0, 0, 481, 40))
        font = QtGui.QFont()
        font.setFamily("Microsoft Tai Le")
        font.setPointSize(22)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label.setFont(font)
        self.label.setStyleSheet("color: #bd93f9;\n"
                                 "")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.closeButton = QtWidgets.QPushButton(self.frame)
        self.closeButton.setGeometry(QtCore.QRect(640, 10, 31, 21))
        self.closeButton.setStyleSheet("QPushButton{border-radius:0px;border: 0px solid #345781;}")
        self.closeButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons8-macos-close-96.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.closeButton.setIcon(icon)
        self.closeButton.setObjectName("closeButton")
        self.horizontalLayout.addWidget(self.frame)

        self.retranslateUi(GUI)
        QtCore.QMetaObject.connectSlotsByName(GUI)

        self.pushButton.clicked.connect(self.inputCode)
        self.pushButton_2.clicked.connect(self.StoreFile)
        self.pushButton_3.clicked.connect(self.generateCode)
        self.closeButton.clicked.connect(lambda: self.close())

    def retranslateUi(self, GUI):
        _translate = QtCore.QCoreApplication.translate
        GUI.setWindowTitle(_translate("GUI", "GUI"))
        self.pushButton.setText(_translate("GUI", "Input"))
        self.pushButton_2.setText(_translate("GUI", "Output"))
        self.pushButton_3.setText(_translate("GUI", "Generate"))
        self.lineEdit_3.setText(_translate("GUI", "Output shown here"))
        self.label.setText(_translate("GUI", ".UI to PY code generator"))

    def inputCode(self):
        array = []
        try:
            with open("InputFields.txt", mode="r") as f:
                for i in f:
                    array.append(i)

            str = f"{array[0].strip()}/"
            file, check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                                      f"{str}", "UI files (*.ui)")
            print(str)
        except:

            file, check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                                      "C://", "UI files (*.ui)")
        if check:
            self.lineEdit.setText(file)
            del array

    def StoreFile(self):
        array = []
        try:
            with open("InputFields.txt", mode="r") as f:
                for i in f:
                    array.append(i)
            str = f"{array[1].strip()}"
            file = QFileDialog.getExistingDirectory(None, "Choose Directory",
                                                    f"{str}")  # I can leave the C:// part empty - so it opens anywat same as the inputCOde function above
        except:

            file = QFileDialog.getExistingDirectory(None, "Choose Directory",
                                                    "C:\\")  # I can leave the C:// part empty - so it opens anywat same as the inputCOde function above
        self.lineEdit_2.setText(file)
        del array

    def generateCode(self):
        if (self.lineEdit.text() != "" and (self.lineEdit_2.text() != "" or self.lineEdit_2.text() != "C:/")):
            command = f"cd {os.path.dirname(self.lineEdit.text())}"
            print(command)
            f_name, f_ext = os.path.splitext(os.path.basename(self.lineEdit.text()))
            turn_to_py_command = f"pyuic5 -x {os.path.basename(self.lineEdit.text())} -o {f_name}.py"
            os.system(f'cmd /c "{command} & {turn_to_py_command}"')

            if (os.path.exists(f'{os.path.dirname(self.lineEdit.text())}\\{f_name}.py')):
                # move code

                original = f'{os.path.dirname(self.lineEdit.text())}\\{f_name}.py'
                target = f'{self.lineEdit_2.text()}\\{f_name}.py'

                shutil.move(original, target)

                if (os.path.exists(f'{self.lineEdit_2.text()}\\{f_name}.py')):
                    self.lineEdit_3.setText("Successfully Created!")
                else:
                    self.lineEdit_3.setText("UI to Python file failed...Try again")

            else:
                self.lineEdit_3.setText("UI to Python file failed...Try again")

            with open("InputFields.txt", mode="w") as f:
                f.write(f"{os.path.dirname(self.lineEdit.text())}\n")
                f.write(self.lineEdit_2.text())
            # change text


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    GUI = QtWidgets.QWidget()
    ui = Ui_GUI()
    ui.setupUi(GUI)
    GUI.show()
    sys.exit(app.exec_())
